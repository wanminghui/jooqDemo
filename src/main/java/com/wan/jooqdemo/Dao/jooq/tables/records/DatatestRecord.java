/*
 * This file is generated by jOOQ.
 */
package com.wan.jooqdemo.Dao.jooq.tables.records;


import com.wan.jooqdemo.Dao.jooq.tables.Datatest;

import java.time.LocalDateTime;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DatatestRecord extends UpdatableRecordImpl<DatatestRecord> implements Record3<Integer, LocalDateTime, LocalDateTime> {

    private static final long serialVersionUID = -793845286;

    /**
     * Setter for <code>userinfo.datatest.userid</code>.
     */
    public void setUserid(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>userinfo.datatest.userid</code>.
     */
    public Integer getUserid() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>userinfo.datatest.starttime</code>.
     */
    public void setStarttime(LocalDateTime value) {
        set(1, value);
    }

    /**
     * Getter for <code>userinfo.datatest.starttime</code>.
     */
    public LocalDateTime getStarttime() {
        return (LocalDateTime) get(1);
    }

    /**
     * Setter for <code>userinfo.datatest.endtime</code>.
     */
    public void setEndtime(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>userinfo.datatest.endtime</code>.
     */
    public LocalDateTime getEndtime() {
        return (LocalDateTime) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, LocalDateTime, LocalDateTime> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Datatest.DATATEST.USERID;
    }

    @Override
    public Field<LocalDateTime> field2() {
        return Datatest.DATATEST.STARTTIME;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return Datatest.DATATEST.ENDTIME;
    }

    @Override
    public Integer component1() {
        return getUserid();
    }

    @Override
    public LocalDateTime component2() {
        return getStarttime();
    }

    @Override
    public LocalDateTime component3() {
        return getEndtime();
    }

    @Override
    public Integer value1() {
        return getUserid();
    }

    @Override
    public LocalDateTime value2() {
        return getStarttime();
    }

    @Override
    public LocalDateTime value3() {
        return getEndtime();
    }

    @Override
    public DatatestRecord value1(Integer value) {
        setUserid(value);
        return this;
    }

    @Override
    public DatatestRecord value2(LocalDateTime value) {
        setStarttime(value);
        return this;
    }

    @Override
    public DatatestRecord value3(LocalDateTime value) {
        setEndtime(value);
        return this;
    }

    @Override
    public DatatestRecord values(Integer value1, LocalDateTime value2, LocalDateTime value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DatatestRecord
     */
    public DatatestRecord() {
        super(Datatest.DATATEST);
    }

    /**
     * Create a detached, initialised DatatestRecord
     */
    public DatatestRecord(Integer userid, LocalDateTime starttime, LocalDateTime endtime) {
        super(Datatest.DATATEST);

        set(0, userid);
        set(1, starttime);
        set(2, endtime);
    }
}
