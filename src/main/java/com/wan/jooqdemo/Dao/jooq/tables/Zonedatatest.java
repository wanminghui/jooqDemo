/*
 * This file is generated by jOOQ.
 */
package com.wan.jooqdemo.Dao.jooq.tables;


import com.wan.jooqdemo.Dao.jooq.Indexes;
import com.wan.jooqdemo.Dao.jooq.Keys;
import com.wan.jooqdemo.Dao.jooq.Userinfo;
import com.wan.jooqdemo.Dao.jooq.tables.records.ZonedatatestRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Zonedatatest extends TableImpl<ZonedatatestRecord> {

    private static final long serialVersionUID = -1448571502;

    /**
     * The reference instance of <code>userinfo.zonedatatest</code>
     */
    public static final Zonedatatest ZONEDATATEST = new Zonedatatest();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ZonedatatestRecord> getRecordType() {
        return ZonedatatestRecord.class;
    }

    /**
     * The column <code>userinfo.zonedatatest.id</code>.
     */
    public final TableField<ZonedatatestRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>userinfo.zonedatatest.zonestarttime</code>.
     */
    public final TableField<ZonedatatestRecord, LocalDateTime> ZONESTARTTIME = createField(DSL.name("zonestarttime"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>userinfo.zonedatatest.zoneendtime</code>.
     */
    public final TableField<ZonedatatestRecord, LocalDateTime> ZONEENDTIME = createField(DSL.name("zoneendtime"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * Create a <code>userinfo.zonedatatest</code> table reference
     */
    public Zonedatatest() {
        this(DSL.name("zonedatatest"), null);
    }

    /**
     * Create an aliased <code>userinfo.zonedatatest</code> table reference
     */
    public Zonedatatest(String alias) {
        this(DSL.name(alias), ZONEDATATEST);
    }

    /**
     * Create an aliased <code>userinfo.zonedatatest</code> table reference
     */
    public Zonedatatest(Name alias) {
        this(alias, ZONEDATATEST);
    }

    private Zonedatatest(Name alias, Table<ZonedatatestRecord> aliased) {
        this(alias, aliased, null);
    }

    private Zonedatatest(Name alias, Table<ZonedatatestRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Zonedatatest(Table<O> child, ForeignKey<O, ZonedatatestRecord> key) {
        super(child, key, ZONEDATATEST);
    }

    @Override
    public Schema getSchema() {
        return Userinfo.USERINFO;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ZONEDATATEST_PRIMARY);
    }

    @Override
    public Identity<ZonedatatestRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ZONEDATATEST;
    }

    @Override
    public UniqueKey<ZonedatatestRecord> getPrimaryKey() {
        return Keys.KEY_ZONEDATATEST_PRIMARY;
    }

    @Override
    public List<UniqueKey<ZonedatatestRecord>> getKeys() {
        return Arrays.<UniqueKey<ZonedatatestRecord>>asList(Keys.KEY_ZONEDATATEST_PRIMARY);
    }

    @Override
    public Zonedatatest as(String alias) {
        return new Zonedatatest(DSL.name(alias), this);
    }

    @Override
    public Zonedatatest as(Name alias) {
        return new Zonedatatest(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Zonedatatest rename(String name) {
        return new Zonedatatest(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Zonedatatest rename(Name name) {
        return new Zonedatatest(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
