/*
 * This file is generated by jOOQ.
 */
package com.wan.jooqdemo.Dao.jooq.tables.records;


import com.wan.jooqdemo.Dao.jooq.tables.Person;

import javax.annotation.processing.Generated;
import javax.validation.constraints.Size;

import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PersonRecord extends TableRecordImpl<PersonRecord> implements Record3<Integer, String, String> {

    private static final long serialVersionUID = 1932003273;

    /**
     * Setter for <code>userinfo.person.pid</code>.
     */
    public void setPid(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>userinfo.person.pid</code>.
     */
    public Integer getPid() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>userinfo.person.pname</code>.
     */
    public void setPname(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>userinfo.person.pname</code>.
     */
    @Size(max = 20)
    public String getPname() {
        return (String) get(1);
    }

    /**
     * Setter for <code>userinfo.person.paddr</code>.
     */
    public void setPaddr(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>userinfo.person.paddr</code>.
     */
    @Size(max = 50)
    public String getPaddr() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Person.PERSON.PID;
    }

    @Override
    public Field<String> field2() {
        return Person.PERSON.PNAME;
    }

    @Override
    public Field<String> field3() {
        return Person.PERSON.PADDR;
    }

    @Override
    public Integer component1() {
        return getPid();
    }

    @Override
    public String component2() {
        return getPname();
    }

    @Override
    public String component3() {
        return getPaddr();
    }

    @Override
    public Integer value1() {
        return getPid();
    }

    @Override
    public String value2() {
        return getPname();
    }

    @Override
    public String value3() {
        return getPaddr();
    }

    @Override
    public PersonRecord value1(Integer value) {
        setPid(value);
        return this;
    }

    @Override
    public PersonRecord value2(String value) {
        setPname(value);
        return this;
    }

    @Override
    public PersonRecord value3(String value) {
        setPaddr(value);
        return this;
    }

    @Override
    public PersonRecord values(Integer value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PersonRecord
     */
    public PersonRecord() {
        super(Person.PERSON);
    }

    /**
     * Create a detached, initialised PersonRecord
     */
    public PersonRecord(Integer pid, String pname, String paddr) {
        super(Person.PERSON);

        set(0, pid);
        set(1, pname);
        set(2, paddr);
    }
}
