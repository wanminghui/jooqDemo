/*
 * This file is generated by jOOQ.
 */
package com.wan.jooqdemo.Dao.jooq.tables;


import com.wan.jooqdemo.Dao.jooq.Userinfo;
import com.wan.jooqdemo.Dao.jooq.tables.records.ScoreRecord;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Score extends TableImpl<ScoreRecord> {

    private static final long serialVersionUID = 1078228052;

    /**
     * The reference instance of <code>userinfo.score</code>
     */
    public static final Score SCORE = new Score();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ScoreRecord> getRecordType() {
        return ScoreRecord.class;
    }

    /**
     * The column <code>userinfo.score.sid</code>.
     */
    public final TableField<ScoreRecord, Integer> SID = createField(DSL.name("sid"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>userinfo.score.sname</code>.
     */
    public final TableField<ScoreRecord, String> SNAME = createField(DSL.name("sname"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>userinfo.score.scores</code>.
     */
    public final TableField<ScoreRecord, Integer> SCORES = createField(DSL.name("scores"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>userinfo.score</code> table reference
     */
    public Score() {
        this(DSL.name("score"), null);
    }

    /**
     * Create an aliased <code>userinfo.score</code> table reference
     */
    public Score(String alias) {
        this(DSL.name(alias), SCORE);
    }

    /**
     * Create an aliased <code>userinfo.score</code> table reference
     */
    public Score(Name alias) {
        this(alias, SCORE);
    }

    private Score(Name alias, Table<ScoreRecord> aliased) {
        this(alias, aliased, null);
    }

    private Score(Name alias, Table<ScoreRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Score(Table<O> child, ForeignKey<O, ScoreRecord> key) {
        super(child, key, SCORE);
    }

    @Override
    public Schema getSchema() {
        return Userinfo.USERINFO;
    }

    @Override
    public Score as(String alias) {
        return new Score(DSL.name(alias), this);
    }

    @Override
    public Score as(Name alias) {
        return new Score(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Score rename(String name) {
        return new Score(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Score rename(Name name) {
        return new Score(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
