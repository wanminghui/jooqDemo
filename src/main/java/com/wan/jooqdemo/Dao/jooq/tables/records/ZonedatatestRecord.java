/*
 * This file is generated by jOOQ.
 */
package com.wan.jooqdemo.Dao.jooq.tables.records;


import com.wan.jooqdemo.Dao.jooq.tables.Zonedatatest;

import java.time.LocalDateTime;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ZonedatatestRecord extends UpdatableRecordImpl<ZonedatatestRecord> implements Record3<Integer, LocalDateTime, LocalDateTime> {

    private static final long serialVersionUID = 947782028;

    /**
     * Setter for <code>userinfo.zonedatatest.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>userinfo.zonedatatest.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>userinfo.zonedatatest.zonestarttime</code>.
     */
    public void setZonestarttime(LocalDateTime value) {
        set(1, value);
    }

    /**
     * Getter for <code>userinfo.zonedatatest.zonestarttime</code>.
     */
    public LocalDateTime getZonestarttime() {
        return (LocalDateTime) get(1);
    }

    /**
     * Setter for <code>userinfo.zonedatatest.zoneendtime</code>.
     */
    public void setZoneendtime(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>userinfo.zonedatatest.zoneendtime</code>.
     */
    public LocalDateTime getZoneendtime() {
        return (LocalDateTime) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, LocalDateTime, LocalDateTime> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Zonedatatest.ZONEDATATEST.ID;
    }

    @Override
    public Field<LocalDateTime> field2() {
        return Zonedatatest.ZONEDATATEST.ZONESTARTTIME;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return Zonedatatest.ZONEDATATEST.ZONEENDTIME;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public LocalDateTime component2() {
        return getZonestarttime();
    }

    @Override
    public LocalDateTime component3() {
        return getZoneendtime();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public LocalDateTime value2() {
        return getZonestarttime();
    }

    @Override
    public LocalDateTime value3() {
        return getZoneendtime();
    }

    @Override
    public ZonedatatestRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public ZonedatatestRecord value2(LocalDateTime value) {
        setZonestarttime(value);
        return this;
    }

    @Override
    public ZonedatatestRecord value3(LocalDateTime value) {
        setZoneendtime(value);
        return this;
    }

    @Override
    public ZonedatatestRecord values(Integer value1, LocalDateTime value2, LocalDateTime value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ZonedatatestRecord
     */
    public ZonedatatestRecord() {
        super(Zonedatatest.ZONEDATATEST);
    }

    /**
     * Create a detached, initialised ZonedatatestRecord
     */
    public ZonedatatestRecord(Integer id, LocalDateTime zonestarttime, LocalDateTime zoneendtime) {
        super(Zonedatatest.ZONEDATATEST);

        set(0, id);
        set(1, zonestarttime);
        set(2, zoneendtime);
    }
}
