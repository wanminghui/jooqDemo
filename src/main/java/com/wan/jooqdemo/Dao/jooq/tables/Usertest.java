/*
 * This file is generated by jOOQ.
 */
package com.wan.jooqdemo.Dao.jooq.tables;


import com.wan.jooqdemo.Dao.jooq.Userinfo;
import com.wan.jooqdemo.Dao.jooq.tables.records.UsertestRecord;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Usertest extends TableImpl<UsertestRecord> {

    private static final long serialVersionUID = 1014385037;

    /**
     * The reference instance of <code>userinfo.usertest</code>
     */
    public static final Usertest USERTEST = new Usertest();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsertestRecord> getRecordType() {
        return UsertestRecord.class;
    }

    /**
     * The column <code>userinfo.usertest.uid</code>.
     */
    public final TableField<UsertestRecord, Byte> UID = createField(DSL.name("uid"), org.jooq.impl.SQLDataType.TINYINT, this, "");

    /**
     * The column <code>userinfo.usertest.userinfomessage</code>.
     */
    public final TableField<UsertestRecord, String> USERINFOMESSAGE = createField(DSL.name("userinfomessage"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>userinfo.usertest</code> table reference
     */
    public Usertest() {
        this(DSL.name("usertest"), null);
    }

    /**
     * Create an aliased <code>userinfo.usertest</code> table reference
     */
    public Usertest(String alias) {
        this(DSL.name(alias), USERTEST);
    }

    /**
     * Create an aliased <code>userinfo.usertest</code> table reference
     */
    public Usertest(Name alias) {
        this(alias, USERTEST);
    }

    private Usertest(Name alias, Table<UsertestRecord> aliased) {
        this(alias, aliased, null);
    }

    private Usertest(Name alias, Table<UsertestRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Usertest(Table<O> child, ForeignKey<O, UsertestRecord> key) {
        super(child, key, USERTEST);
    }

    @Override
    public Schema getSchema() {
        return Userinfo.USERINFO;
    }

    @Override
    public Usertest as(String alias) {
        return new Usertest(DSL.name(alias), this);
    }

    @Override
    public Usertest as(Name alias) {
        return new Usertest(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Usertest rename(String name) {
        return new Usertest(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Usertest rename(Name name) {
        return new Usertest(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Byte, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
